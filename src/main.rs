#![feature(f128)]

use bigdecimal::{BigDecimal, ToPrimitive};
use std::f128::consts;
use std::str::FromStr;

fn pow_new(val1: BigDecimal, val2: i32) -> BigDecimal {
    let mut result = BigDecimal::from(1);
    let mut base: BigDecimal = val1.clone();
    let mut exp: i32 = val2;

    while exp > 0 {
        if exp % 2 == 1 {
            result *= &base;
        }
        base = base.clone() * base;
        exp /= 2;
    }

    result
}
// SA = 2(PI)r^2 + 2(PI)(r)(h)

fn main() {
    let big_decimal_3: BigDecimal = BigDecimal::from(3);

    let pi_str: &str = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275900";
    let big_decimal_PI: BigDecimal = BigDecimal::from_str(pi_str).unwrap();
    println!("Big PI: {}", &big_decimal_PI.to_string());
    let big_decimal_height: BigDecimal = BigDecimal::from(200 / (9 * &big_decimal_PI));
    println!("Big Height: {}", big_decimal_height.to_string());
    let first_value: BigDecimal = BigDecimal::from(2 * &big_decimal_PI * pow_new(big_decimal_3, 2));
    println!("First Big Value: {}", first_value.to_string());
    let second_value: BigDecimal = BigDecimal::from(2 * &big_decimal_PI * 3 * big_decimal_height);
    println!("Second Big Value: {}", second_value.to_string());
    let final_value: BigDecimal = BigDecimal::from(first_value + second_value);
    println!(
        "Final Big Value (Second Big Value + First Big Value): {}",
        final_value.to_string()
    );
}
